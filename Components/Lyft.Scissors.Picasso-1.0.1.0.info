{"Name":"Scissors","Id":2360,"Alias":"Lyft.Scissors.Picasso","Description":"\n\u003ciframe src=\"https://appetize.io/embed/hrwtyeujwtnnaumz39y28auaj0?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\u0026osVersion=5.1.1\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float:right;margin-left:1em;\"\u003e\u003c/iframe\u003e\n\n**Scissors** is a fixed viewport image cropping library for Android.\n\n## Usage\n\nTo make use of `CropView` in your layout:\n\n    \u003ccom.lyft.android.scissors.CropView\n        android:id=\"@+id/crop_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:cropviewViewportHeightRatio=\"1\" /\u003e\n\nUse the `cropviewViewportHeightRatio` attribute so set the aspect ratio of the \nheight with relation to the width.\n\nThen, set an image to be cropped, using one of the `SetImage` methods:\n\n    // by resource ID\n    cropView.SetImageResource (Resource.Drawable.AfricanLion);\n    \n    // by bitmap\n    cropView.SetImageBitmap (someBitmap);\n\nTo get the cropped image, use the `Crop` method:\n\n    Bitmap croppedBitmap = cropView.Crop ();\n\n### Extensions\n\nScissors comes with handy extensions which help with common tasks like:\n\n#### Loading a Bitmap\nTo load a Bitmap automatically with Square\u0027s Picasso library:\n\n    cropView.WithExtensions\n        .Load (galleryUri);\n\n#### Cropping into a File\nTo save a cropped Bitmap into a `File` use as follows:\n\n    var croppedFile = new File (CacheDir, \"cropped.jpg\");\n    await cropView.WithExtensions\n        .Crop ()\n        .Quality (87)\n        .Format (Bitmap.CompressFormat.Jpeg)\n        .IntoAsync (croppedFile));\n","Version":"1.0.1.0","Summary":"Fixed viewport image cropping library for Android.","QuickStart":"\n**Scissors** is a fixed viewport image cropping library for Android.\n\n## Usage\n\nTo make use of `CropView` in your layout:\n\n    \u003ccom.lyft.android.scissors.CropView\n        android:id=\"@+id/crop_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:cropviewViewportHeightRatio=\"1\" /\u003e\n\n_Use the `cropviewViewportHeightRatio` attribute so set the aspect ratio of the \nheight with relation to the width._\n\nThen, set an image to be cropped, using one of the `SetImage` methods:\n\n    // by resource ID\n    cropView.SetImageResource (Resource.Drawable.AfricanLion);\n    \n    // by bitmap\n    cropView.SetImageBitmap (someBitmap);\n\nTo get the cropped image, use the `Crop` method:\n\n    Bitmap croppedBitmap = cropView.Crop ();\n\n### Extensions\n\nScissors comes with handy extensions which help with common tasks like:\n\n#### Loading a Bitmap\nTo load a Bitmap automatically with Square\u0027s Picasso library:\n\n    cropView.WithExtensions\n        .Load (galleryUri);\n\n#### Cropping into a File\nTo save a cropped Bitmap into a `File` use as follows:\n\n    var croppedFile = new File (CacheDir, \"cropped.jpg\");\n    await cropView.WithExtensions\n        .Crop ()\n        .Quality (87)\n        .Format (Bitmap.CompressFormat.Jpeg)\n        .IntoAsync (croppedFile));\n","Hash":"9f499eb8fd85fcda0861fd2ec98ba32d","TargetPlatforms":["android"],"TrialHash":null}